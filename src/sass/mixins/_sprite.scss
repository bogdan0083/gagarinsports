// SCSS variables are information about icon's compiled state, stored under its original file name
//
// .icon-home {
//   width: $icon-home-width;
// }
//
// The large array-like variables contain all information about a single icon
// $icon-home: x y offset_x offset_y width height total_width total_height image_path;
//
// At the bottom of this section, we provide information about the spritesheet itself
// $spritesheet: width height image $spritesheet-sprites;
$-facebook-name: 'Facebook';
$-facebook-x: 0px;
$-facebook-y: 97px;
$-facebook-offset-x: 0px;
$-facebook-offset-y: -97px;
$-facebook-width: 29px;
$-facebook-height: 29px;
$-facebook-total-width: 155px;
$-facebook-total-height: 126px;
$-facebook-image: 'icons.png';
$-facebook: (0px, 97px, 0px, -97px, 29px, 29px, 155px, 126px, 'icons.png', 'Facebook',);
$-facebook-2x-name: 'Facebook@2x';
$-facebook-2x-x: 97px;
$-facebook-2x-y: 0px;
$-facebook-2x-offset-x: -97px;
$-facebook-2x-offset-y: 0px;
$-facebook-2x-width: 58px;
$-facebook-2x-height: 58px;
$-facebook-2x-total-width: 155px;
$-facebook-2x-total-height: 126px;
$-facebook-2x-image: 'icons.png';
$-facebook-2x: (97px, 0px, -97px, 0px, 58px, 58px, 155px, 126px, 'icons.png', 'Facebook@2x',);
$-facebook-3x-name: 'Facebook@3x';
$-facebook-3x-x: 0px;
$-facebook-3x-y: 0px;
$-facebook-3x-offset-x: 0px;
$-facebook-3x-offset-y: 0px;
$-facebook-3x-width: 87px;
$-facebook-3x-height: 87px;
$-facebook-3x-total-width: 155px;
$-facebook-3x-total-height: 126px;
$-facebook-3x-image: 'icons.png';
$-facebook-3x: (0px, 0px, 0px, 0px, 87px, 87px, 155px, 126px, 'icons.png', 'Facebook@3x',);
$spritesheet-width: 155px;
$spritesheet-height: 126px;
$spritesheet-image: 'icons.png';
$spritesheet-sprites: ($-facebook, $-facebook-2x, $-facebook-3x, );
$spritesheet: (155px, 126px, 'icons.png', $spritesheet-sprites,);

// The provided mixins are intended to be used with the array-like variables
//
// .icon-home {
//   @include sprite-width($icon-home);
// }
//
// .icon-email {
//   @include sprite($icon-email);
// }
//
// Example usage in HTML:
//
// `display: block` sprite:
// <div class="icon-home"></div>
//
// To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:
//
// // CSS
// .icon {
//   display: inline-block;
// }
//
// // HTML
// <i class="icon icon-home"></i>
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

// The `sprites` mixin generates identical output to the CSS template
//   but can be overridden inside of SCSS
//
// @include sprites($spritesheet-sprites);
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
